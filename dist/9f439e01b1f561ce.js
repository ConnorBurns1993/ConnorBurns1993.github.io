import"../css/style.css";import"../css/animate.css";import"../css/font-awesome.css";import"../css/font-awesome.min.css";import"../css/namari-color.css";import*as THREE from"three";import*as dat from"lil-gui";import gsap from"gsap";const parameters={materialColor:"#b90000"},canvas=document.querySelector("canvas.webgl"),scene=new THREE.Scene,textureLoader=new THREE.TextureLoader,particleTexture=textureLoader.load("/textures/particles/1.png"),renderTexture=textureLoader.load("/textures/diamond/render.jpg"),normalTexture=textureLoader.load("/textures/diamond/normal.jpg"),ambientOcclusionTexture=textureLoader.load("/textures/diamond/ambientOcclusion.jpg"),displacementTexture=textureLoader.load("/textures/diamond/displacement.jpg"),colorTexture=textureLoader.load("/textures/diamond/color.jpg"),specularityTexture=textureLoader.load("/textures/diamond/specularity.jpg"),material=new THREE.MeshStandardMaterial({aoMap:ambientOcclusionTexture,normalMap:normalTexture,displacementMap:displacementTexture,displacementScale:0,metalness:.3,roughness:.2,color:"#b90000",alphaMap:specularityTexture,aoMapIntensity:1,flatShading:!0}),objectDistance=4,mesh1=new THREE.Mesh(new THREE.OctahedronGeometry(.65,10),material);mesh1.position.y=.32,mesh1.position.x=1,scene.add(mesh1);const sectionMeshes=[mesh1];let currentIntersect=null;const raycaster=new THREE.Raycaster,intersects=raycaster.intersectObjects(sectionMeshes);currentIntersect=intersects.length?intersects[0]:null;const directionalLight=new THREE.DirectionalLight("#ffffff",1.1);directionalLight.position.set(1,0,1),scene.add(directionalLight);const sizes={width:window.innerWidth,height:window.innerHeight};window.addEventListener("resize",(()=>{sizes.width=window.innerWidth,sizes.height=window.innerHeight,camera.aspect=sizes.width/sizes.height,camera.updateProjectionMatrix(),renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const cameraGroup=new THREE.Group;scene.add(cameraGroup);const camera=new THREE.PerspectiveCamera(35,sizes.width/sizes.height,.1,100);camera.position.z=6,cameraGroup.add(camera);const renderer=new THREE.WebGLRenderer({canvas,alpha:!0});renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2));let scrollY=window.scrollY,currentSection=0;window.addEventListener("load",(()=>{const e=Math.round(scrollY/sizes.height);currentSection=e,gsap.to(sectionMeshes[currentSection].rotation,{duration:3,ease:"power.inOut",y:"+=5",x:"+=1"})})),window.addEventListener("scroll",(()=>{scrollY=window.scrollY;const e=Math.round(scrollY/sizes.height);e!=currentSection&&(currentSection=e,gsap.to(sectionMeshes[currentSection].rotation,{duration:1.5,ease:"power.inOut",y:"+=3",x:"+=1"}))}));const cursor={x:0,y:0};window.addEventListener("mousemove",(e=>{cursor.x=e.clientX/sizes.width-.1,cursor.y=e.clientY/sizes.height-.1}));const clock=new THREE.Clock;let previousTime=0;const tick=()=>{const e=clock.getElapsedTime(),t=e-previousTime;previousTime=e,camera.position.y=-scrollY/sizes.height*4,cursor.x,cursor.y;for(const e of sectionMeshes)e.rotation.x+=.1*t,e.rotation.y+=.4*t;raycaster.setFromCamera(cursor,camera),renderer.render(scene,camera),window.requestAnimationFrame(tick)};tick();